use anchor_lang::prelude::*;

//program id that has info for solana on how to run our program
//it was generated by anchor init
//it specifies how to load and execute the program
//helps solana runtime to see all the accounts created by the program itself and be able to reference them
declare_id!("6WBcp53BmFkssLghA1Rr6Cw91zJ13iM67JM7SAkFgpiE");

//this tells us that everything in the module below is our program

#[program]

//pub mod tells us that this is a rust module, basically a class
pub mod myepicproject {
    use super::*;

    pub fn start_stuff_off(_ctx: Context<StartStuffOff>) -> Result<()> {
        //get a reference to the account
        //mut is mutable
        //using &mut gives use the power to make changes to base_account, otherwise we'd be working w a local copy of base_acct instead
        let base_account = &mut _ctx.accounts.base_account;

        //Initialize total_gifs
        base_account.total_gifs = 0;
        Ok(())
    }

    pub fn add_gif(_ctx: Context<AddGif>, gif_link: String) -> Result<()> {
        let base_account = &mut _ctx.accounts.base_account; //reference account
        let user = &mut _ctx.accounts.user;

        //build struct
        let item = ItemStruct{
            gif_link: gif_link.to_string(),
            user_address: *user.to_account_info().key,
        };

        //add to the gif_list vector
        base_account.gif_list.push(item);
        base_account.total_gifs += 1; //increment gifs

        Ok(())
    }
}

//tells solana how to initialize
#[derive(Accounts)]
//specifies different account constraints
pub struct StartStuffOff<'info> {
    //attach certain variables to the startstuffoff ctx
    #[account(init, payer = user, space = 9000)]
    //init tells solana to create a new acct owned by current program. Payer=user tells who's paying for the acct created, the user. Space allocates x bytes for our acct
    //there is a payer as users need to pay "rent" for their accounts, validators clear the acct if rent is not paid
    pub base_account: Account<'info, BaseAccount>,
    #[account(mut)]
    pub user: Signer<'info>, //data passed into the program that proves that the user calling the program actually owns the wallet
    pub system_program: Program<'info, System>, //references systemProgram, the program running solana, it is responsible for creating accounts in solana
}

//basically says when someone calls addgif attach the addgif context so that user can access the base_account
#[derive(Accounts)]
pub struct AddGif<'info> {
    #[account(mut)]
    //did this because AddGif has access to a mutable reference to base_account. Otherwise it would change data within function but not on my acct
    pub base_account: Account<'info, BaseAccount>,

    #[account(mut)]
    pub user: Signer<'info>,
}

//custom struct 
#[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)]//this line tells anchor how to de/serialize the struct
pub struct ItemStruct{
    pub gif_link: String,
    pub user_address:Pubkey,
}

//tells solana what we want to store on this account
#[account]
pub struct BaseAccount {
    pub total_gifs: u64,
    pub gif_list: Vec<ItemStruct>,//vec is a vector, basically an array. This vec will hold an array of itemstructs
}
